@using Newtonsoft.Json
@model DashboardFlightSchoolModelView
@{
    Layout = "_LayoutDashboard";
    string jsonList = JsonConvert.SerializeObject(Model.FlightSchool.Links);

	ViewData["Title"] = "Aeroclube";
}

@section Styles{
    <link rel="stylesheet" href="~/css/dashboard/flightschool/styles.css" />

}


<div class="pessoasSection">
    <div class="pessoasCadastradas cardDash">
        <span class="pessoasCadastradas_numero cardDash_number">
            @{
                int pessoasCadastradas = Model.FlightSchool.Users.Count();
            }
           @pessoasCadastradas
        </span>
        <span class="pessoasCadastradas_text cardDash_text">
            pessoas cadastradas
        </span>
    </div>

    <div class="alunosCadastrados cardDash">
        @{
            int alunosCadastrados = Model.FlightSchool.Users.Where(u => u.FlightSchoolRoles.Any(fr => fr.Role == FlightSchoolRoleEnum.Student)).Count();
        }
        <span class="alunosCadastrados_numero cardDash_number">
            @alunosCadastrados
        </span>
        <span class="alunosCadastrados_text cardDash_text">
            alunos cadastrados
        </span>
    </div>

    <div class="instrutoresCadastrados cardDash">
        @{
            int intrutoresCadastrados = Model.FlightSchool.Users.Where(u => u.FlightSchoolRoles.Any(fr => fr.Role == FlightSchoolRoleEnum.Instructor)).Count();
        }
        <span class="instrutoresCadastrados_numero cardDash_number">
            @intrutoresCadastrados
        </span>
        <span class="instrutoresCadastrados_text cardDash_text">
            instrutores cadastrados
        </span>
    </div>
</div>

<div class="usuariosSection">
    <!--Usuários-->

    <div class="usuariosItem">
        <div class="dashboardHeader planesItem__header"
             style="justify-content: space-between;">
            <div class="headerDados"
                 style="display: flex; align-items: center; gap: 5px;">
                <img src="https://cdn-icons-png.flaticon.com/512/4327/4327495.png"
                     alt=""
                     class="dashboardHeader_icon" />
                <span>Usuários</span>
            </div>
            <div class="pesquisaUsuarios">
                <input type="text"
                       id="inputUsuarios"
                       placeholder="Procure por alguém" />
                <button id="buttonUsuarios">
                    <span class="material-symbols-outlined">
                        search
                    </span>
                </button>
            </div>
        </div>

        <div class="usuariosContent">
            @foreach (var user in Model.FlightSchool.Users)
            {
                <div class="usuariosItem_user">
                    <div class="userDados">
                    <img src="@user.User.PerfilImage"
                         alt="Foto do @user.User.FirstName" />
                    <span class="usuariosName">@user.User.FirstName @user.User.LastName</span>
                </div>
                <div class="userFunctions">
                        @foreach (var role in user.FlightSchoolRoles)
                        {
                            <span>@role.Role</span>
                        }
                    </div>

                        @if (Model.UserFlightSchool.FlightSchoolRoles.Any(fr => fr.Role == FlightSchoolRoleEnum.Admin))
                    {
                                        <div class="userActions">


                            <button class="userActions_functions">
                                permissões
                            </button>
                            <button class="userActions_remover">
                                <span class="material-symbols-outlined">
                                    delete
                                </span>
                            </button>
                                            </div>

                        }

                
            </div>

            }


        </div>


    </div>

    <!--Links-->

    <div class="linksItem">
        <div class="dashboardHeader linksItem__header">
            <img src="https://cdn-icons-png.freepik.com/256/2499/2499303.png?semt=ais_hybrid"
                 alt=""
                 class="dashboardHeader_icon" />
            <span>Links</span>
            <button class="infoHeaderButton"
                    onclick="mostrarMsg('Links', 'Você pode criar links para que as pessoas se juntem ao seu aeroclube, especificando suas funções como admin, instrutor ou aluno.')">
                ?
            </button>
        </div>

        <dic class="linksContent">
            <div class="linksFeitos">

<!--Conteudo adicionao pelo js-->


            </div>
              <div class="novoLink">
                <span>Crie um novo link.</span>
                <select id="linkRole" name="linkRole">
                  <option value="Admin">Admin</option>
                  <option value="Instructor">Instrutor</option>
                  <option value="Student">Aluno</option>
                  <option value="Maintenance">Manutenção</option>
                </select>
                <button class="criarLink">Criar</button>
                <button class="salvarLinks">Salvar</button>
               

        </dic>
    </div>
</div>

<div class="aeroSection">
    <div class="aeroDados">
        <button class="aeroDisplay">
            <span class="aeroDisplay__text">Dados do Aeroclube</span>

            <span class="material-symbols-outlined aeroDisplay__icon">
                chevron_right
            </span>

        </button>

        <div class="aeroDados_edit">
            <button class="aeroDados_salvar" onclick="salvarDados()">Salvar</button>

            <!--Nome-->
            <div class="aeroDado">
                <label for="Name">Nome do Aeroclube:</label>
                <input type="text" id="Name" name="Name" placeholder="Digite o nome do Aeroclube" value="@Model.FlightSchool.Name">
            </div>

            <!--Descrição-->

            <div class="aeroDado">
                <label for="inputDescricao">Descrição do Aeroclube:</label>
                <textarea id="inputDescricao" name="inputDescricao" rows="4" cols="50" placeholder="Digite a descrição do aeroclube">@Model.FlightSchool.Description</textarea>
            </div>

            <!--Logo aeroclube-->

            <div class="aeroDado aeroDado_imgLogo">
                <label for="InputLogo">Logo Aeroclube</label>
                <img id="logoPreview" src="@Model.FlightSchool.LogoUrl" alt="" class="aeroDado_previewImg" onerror="this.src='https://www.buritama.sp.leg.br/imagens/parlamentares-2013-2016/sem-foto.jpg/image'">

                <input type="file" id="InputLogo" accept="image/*">

            </div>


            <!--Links-->

            <div class="aeroDado">
                <label for="">Links do perfil</label>
                <div class="aeroDados_content">

                    <div class="aeroDados_content_item">
                        <span>url.com</span>
                        <div>
                            <button class="aeroDados_content_button">x</button>
                        </div>
                    </div>

                </div>

                <div class="aeroDado_input">

                    <label for="adicionarLink">Adicionar Link</label>
                    <input type="text" id="adicionarLink" placeholder="Adicionar link">
                    <input type="text" id="adicionarTextoLink" placeholder="Adicionar um texto ao link">

                    <button id="buttonAdicionarLink">Adicionar</button>

                </div>
            </div>


            <!--Aeroporto-->

            <div class="aeroDado">
                <label for="">Aeroporto</label>

                <div class="aeroDado_input">
                    <label for="icaoInput">ICAO</label>
                    <input type="text" id="icaoInput" maxlength="4" minlength="4" value="@Model.FlightSchool.SchoolFlightAirport.ICAO.ToUpper()" placeholder="ICAO do Aeroporto">
                </div>

                <div class="aeroDado_input">
                    <label for="nomeAeroportoInput">Nome do Aeroporto</label>
                    <input type="text" id="nomeAeroportoInput" value="@Model.FlightSchool.SchoolFlightAirport.Name" placeholder="Insira o Nome do Aeroporto">
                </div>

                <div class="aeroDado_input">
                    <label for="estadoAeroportoSelect">Estado</label>
                    <select name="EstadoAeroportoSelect" id="estadoAeroportoSelect"></select>

                </div>

                <div class="aeroDado_input">
                    <label for="localidadeAeroportoInput">Cidade</label>
                    <input type="text" id="localidadeAeroportoInput" oninput="buscarDistritos()" value="@Model.FlightSchool.SchoolFlightAirport.Location" placeholder="Insira o Local do Aeroporto" list="distritos">
                    <datalist id="distritos"></datalist>

                </div>
            </div>


            <div class="aeroDado">
                <label for="">Informações do Aeroclube</label>

                <div class="aeroDado_input">
                    <label for="cnpjInput">CNPJ do Aeroclube</label>
                    <input type="text" id="cnpjInput" value="@Model.FlightSchool.Document" placeholder="CNPJ do Aeroporto">
                </div>

                <div class="aeroDado_input">
                    <label for="ciacInput">CIAC do Aeroporto</label>
                    <input type="text" id="ciacInput" value="@Model.FlightSchool.LicenseNumber" placeholder="Insira o CIAC do Aeroporto">
                </div>
                <button class="infoHeaderButton" onclick="mostrarMsg('CIAC e CNPJ', 'O código do CIAC (Centro de Instrução de Aviação Civil) está disponível no documento público de revisão de uma escola de aviação. Usamos esse código para evitar fraudes e plágios. Para garantir a segurança e integridade das informações, precisamos do CNPJ do Aeroclube. Isso ajuda a evitar fraudes e plágios.')">?</button>

            </div>

            <button class="aeroDados_salvar" onclick="salvarDados()">Salvar</button>

        </div>
    </div>
</div>




@section Scripts{
        <script>
      
        let links = JSON.parse("@Html.Raw(jsonList)")
    </script>
    <script src="~/js/dashboard/flightschool.js"></script>

    <script>
        /*links*/
        let linksCompartilhaveis_lista = []
        const linksCompartilhaveis_content = document.querySelector('.linksFeitos')

        const linksCompartilhaveis_translations = {
            "Admin": "Admin",
            "Instructor": "Instrutor",
            "Student": "Aluno",
            "Maintenance": "Manutenção"
        };

        const linksCompartilhaveis_adicionarButton = document.querySelector(".criarLink")
        const linksCompartilhaveis_roleSelect = document.querySelector("#linkRole")

        linksCompartilhaveis_adicionarButton.addEventListener("click", () => {
            linksCompartilhaveis_adicionarLink(linksCompartilhaveis_roleSelect.value)
        })

        function linksCompartilhaveis_removerLink(role) {
            linksCompartilhaveis_lista = linksCompartilhaveis_lista.filter(
                item => item.roleFunction != role,
            )

            linksCompartilhaveis_atualizarItensLink()
        }

        function linksCompartilhaveis_adicionarLink(role) {
            linksCompartilhaveis_lista = linksCompartilhaveis_lista.filter(
                item => item.roleFunction != role,
            )
            const newCodigo = linksCompartilhaveis_gerarCodigo(10)

            let newItem = {
                roleFunction: role,
                urlCode: newCodigo,
                new: false,
            }

            linksCompartilhaveis_lista.push(newItem)

            linksCompartilhaveis_atualizarItensLink()
        }

        linksCompartilhaveis_atualizarItensLink()
        function linksCompartilhaveis_atualizarItensLink() {
            linksCompartilhaveis_content.innerHTML = ''

            linksCompartilhaveis_lista.forEach((element) => {
                const linkDiv = document.createElement('div')
                linkDiv.className = 'linksFeitos_link'

                const dadosDiv = document.createElement('div')
                dadosDiv.className = 'linksFeitos_dados'

                const linkSpan = document.createElement('span')
                if (element.new == false) {
                    linkSpan.textContent =
                    'O link ficará disponível após salvar os dados.'
                } else {
                    linkSpan.textContent = element.urlCode
                }

                const usuarioSpan = document.createElement('span')
                usuarioSpan.textContent = linksCompartilhaveis_translations[element.roleFunction] || element.roleFunction;

                dadosDiv.appendChild(linkSpan)
                dadosDiv.appendChild(usuarioSpan)

                const actionsDiv = document.createElement('div')
                actionsDiv.className = 'linksFeitos_actions'

                const copiarBtn = document.createElement('button')
                copiarBtn.textContent = 'copiar'

                if (element.new == true) {
                    copiarBtn.onclick = function () {
                        linksCompartilhaveis_copiarTexto(element.urlCode)
                    }
                } else {
                    copiarBtn.onclick = function () {
                        Swal.fire({
                            title: 'Salve para copiar o link',
                            icon: 'info',
                        })
                    }
                }

                const removerBtn = document.createElement('button')
                removerBtn.textContent = 'remover'

                removerBtn.onclick = function () {
                    linksCompartilhaveis_removerLink(element.roleFunction)
                }
                actionsDiv.appendChild(copiarBtn)
                actionsDiv.appendChild(removerBtn)

                linkDiv.appendChild(dadosDiv)
                linkDiv.appendChild(actionsDiv)

                linksCompartilhaveis_content.appendChild(linkDiv)
            })

            if (linksCompartilhaveis_lista.length == 0) {
                linksCompartilhaveis_content.innerHTML = "<span style='color:white'>Sem links compartilháveis.</span>"
            }
        }

        function linksCompartilhaveis_gerarCodigo(tamanho) {
            const caracteres =
                'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'
            let codigo = ''

            for (let i = 0; i < tamanho; i++) {
                const indiceAleatorio = Math.floor(Math.random() * caracteres.length)
                codigo += caracteres[indiceAleatorio]
            }

            return codigo
        }
    </script>


    <script>
        var aeroDisplayIcon = document.querySelector(".aeroDisplay__icon")
        var aeroDados_edit = document.querySelector(".aeroDados_edit")
        var aeroDisplay = document.querySelector(".aeroDisplay")

        aeroDisplay.addEventListener("click", () => {
            toggleAeroDados()
        })

        function toggleAeroDados() {
            aeroDados_edit.classList.toggle("open")
            aeroDisplayIcon.classList.toggle("open")
        }
    </script>

    <script>
        function mostrarMsg(title, msg) {
            Swal.fire({
                title: title,
                text: msg,
                icon: 'info',
            })
        }

        function copiarTexto(texto) {
            var areaTemporaria = document.createElement('textarea')
            areaTemporaria.value = texto
            document.body.appendChild(areaTemporaria)
            areaTemporaria.select()
            document.execCommand('copy')
            document.body.removeChild(areaTemporaria)
            Swal.fire({
                title: 'Link copiado',
                icon: 'success',
            })
        }
    </script>

    <script>
        let inputUsuarios = document.getElementById('inputUsuarios')
        let buttonUsuarios = document.getElementById('buttonUsuarios')
        let usuarios = document.querySelectorAll('.usuariosItem_user')

        function procurarUsuarios(valor) {
            usuarios.forEach((usuario) => {
                const span = usuario.querySelector('.usuariosName')
                const name = span.textContent.toLowerCase()

                if (!inputUsuarios) {
                    usuario.style.display = 'flex'
                } else if (name.includes(inputUsuarios.value.toLowerCase())) {
                    usuario.style.display = 'flex'
                } else {
                    usuario.style.display = 'none'
                }
            })
        }

        buttonUsuarios.addEventListener('click', () => {
            procurarUsuarios(inputUsuarios.value)
        })
    </script>

    <script>
        document.addEventListener("DOMContentLoaded", () => {
            document.querySelector("#estadoAeroportoSelect").value = "@Model.FlightSchool.SchoolFlightAirport.State"
            definirValoresIniciais()

        })
    </script>


    <script>
        async function salvarDados() {

            let dadosValidos = verificarValoresIniciasComAtuais()

            if (dadosValidos == false) {
                Swal.fire({
                    title: "Mude os valores",
                    text: "Os valores são os mesmos que os inciais",
                    icon: 'info',
                })
                return false
            }

            dadosValidos = validarAeroportoNome() && validarDescAeroclube() && validarIcaoAero() && validarCnpjInput() && validarCiac()
            if (dadosValidos == false) {
                Swal.fire({
                    title: "Dados inválidos",
                    text: "Os dados estão inválidos",
                    icon: 'info',
                })
                return false
            }

            let mappedLinks = links.map(link => ({
                Text: link.texto,
                    Url: link.link
            }));

            console.log(mappedLinks)

            let formData = new FormData();
            formData.append("flightSchoolId", "@Model.FlightSchool.Id");
            formData.append("Name", aeroName.value);
            formData.append("Description", aeroDesc.value);
            formData.append("FlightSchoolDocument", cnpjInput.value);
            formData.append("FlightSchoolLicenseNumber", ciacInput.value);
            formData.append("AirportState", estadosSelect.value);
            formData.append("AirportCity", cidadeAeroInput.value);
            formData.append("ICAO", icaoInput.value);
            formData.append("AirportName", aeroportoNome.value);
            formData.append("UpdatedImage", logoAlterado);
            formData.append("logoImage", $("#InputLogo")[0].files[0]);
            formData.append("LinksJson", JSON.stringify(mappedLinks));

            $.ajax({
                type: "POST",
                url: '@Url.ActionLink("EditFlightSchool", "FlightSchools")',
                data: formData,
                contentType: false,
                processData: false,
                success: function (response) {
                    Swal.fire({
                        title: "Dados atualizados",
                        text: "Os dados foram atualizados",
                        icon: 'success',
                    })
                },
                error: function (xhr, status, error) {

                    var errorMsg = xhr.responseJSON && xhr.responseJSON.message ? xhr.responseJSON.message : "Erro desconhecido";
                    Swal.fire({
                        title: "Erro ao atualizar",
                        text: "Não foi possível atualizar os dados do aeroclube. " + errorMsg,
                        icon: 'error',
                    })
                }
            });

        }
    </script>

}
